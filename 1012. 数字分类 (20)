给定一系列正整数，请按要求对数字进行分类，并输出以下5个数字：

A1 = 能被5整除的数字中所有偶数的和；
A2 = 将被5除后余1的数字按给出顺序进行交错求和，即计算n1-n2+n3-n4...；
A3 = 被5除后余2的数字的个数；
A4 = 被5除后余3的数字的平均数，精确到小数点后1位；
A5 = 被5除后余4的数字中最大数字。
输入格式：

每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N，随后给出N个不超过1000的待分类的正整数。数字间以空格分隔。

输出格式：

对给定的N个正整数，按题目要求计算A1~A5并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。

若其中某一类数字不存在，则在相应位置输出“N”。

输入样例1：
13 1 2 3 4 5 6 7 8 9 10 20 16 18
输出样例1：
30 11 2 9.7 9
输入样例2：
8 1 2 4 5 6 7 9 16
输出样例2：
N 11 2 N 9

#include "iostream"
#include "string"
#include "math.h"
#include "vector"
#include <sstream>
#include <iomanip>
using namespace std;

void jiaocuosum(vector<int> a){
	if (a.empty())
		cout << "N" << " ";
	else{
		int i,s=0,t=1;
		for (i = 0; i < a.size(); i++){
			a[i] *= t;
			s += a[i];
			t *= -1;
		}
		cout << s << " ";
	}
}
void average(vector<int> a){
	if (a.empty())
		cout << "N" << " ";
	else{
		int i, s = 0;
		for (i = 0; i < a.size(); i++){
			s += a[i];
		}
		double result =  double(s) / double(a.size());
		cout << setprecision(1)<<fixed << result << " ";
	}
}
void max(vector<int> a){
	if (a.empty())
		cout << "N" ;
	else{
		int i,max = a.front();
		for (i = 0; i < a.size(); i++){
			if (a[i]>max){
				max = a[i];
			}
		}
		cout << max;
	}
}
int main()
{
	int n, i,temp,x;
	vector<int> num, a(5),a1,a3,a4;
	cin >> n;
	for (i = 0; i < n; i++){
		cin >> temp;
		num.push_back(temp);
	}
	for (i = 0; i < n; i++){
		x = num[i] % 5;
		switch (x){
		case 0:{
			if (num[i] % 2 == 0)
				a[0] += num[i];
		}
			   break;
		case 1:{
			a1.push_back(num[i]);
		}
			   break;
		case 2:{
			a[2]++;
		}
			   break;
		case 3:{
			a3.push_back(num[i]);
		}
			   break;
		case 4:{
			a4.push_back(num[i]);
		}
			   break;
		}
	}
	if (a[0] == 0){
		cout << "N" << " ";
	}
	else{
		cout << a[0] << " ";
	}
	jiaocuosum(a1);
	if (a[2] == 0){
		cout << "N" << " ";
	}
	else{
		cout << a[2] << " ";
	}
	average(a3);
	max(a4);
	system("pause");
	return 0;
}
