月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。

注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有3种月饼，其库存量分别为18、15、10万吨，总售价分别为75、72、45亿元。如果市场的最大需求量只有20万吨，那么我们最大收益策略应该是卖出全部15万吨第2种月饼、以及5万吨第3种月饼，获得 72 + 45/2 = 94.5（亿元）。

输入格式：

每个输入包含1个测试用例。每个测试用例先给出一个不超过1000的正整数N表示月饼的种类数、以及不超过500（以万吨为单位）的正整数D表示市场最大需求量。随后一行给出N个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出N个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。

输出格式：

对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后2位。

输入样例：
3 20
18 15 10
75 72 45
输出样例：
94.50

#include<iostream>
#include<string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include<iomanip>
using namespace std;
class unit_price{
public:
  double up;
  int seq;
};
bool compare(unit_price a,unit_price b){
  if (a.up > b.up)
    return true;
  else
    return false;
}
int main(){
  int n, d, i;
  vector<double> inv,sale;
  vector<unit_price> up;
  unit_price buff_up;
  double sum_inv=0,sum_sale=0,buff_inv,buff_sale;
  cin >> n >> d;
  for (i = 0; i < n; i++){
    cin >> buff_inv ;
    inv.push_back(buff_inv);
  }
  for (i = 0; i < n; i++){
    cin >> buff_sale;
    sale.push_back(buff_sale);
    buff_up.up = buff_sale/ inv[i];
    buff_up.seq = i;
    up.push_back(buff_up);
  }

  sort(up.begin(), up.end(),compare);
  for (i = 0; i<n; i++){
    if (sum_inv + inv[i] <= d){
      sum_sale += sale[up[i].seq];
      sum_inv += inv[up[i].seq];
    }
    else
      break;
  }
  if (sum_inv == d||i==n)
    printf("%.2f", sum_sale);
  else{
    printf("%.2f", sum_sale + (d - sum_inv)*up[i].up);
  }
  system("pause");
  return 0;
}
