某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。

这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过200岁的老人，而今天是2014年9月6日，所以超过200岁的生日和未出生的生日都是不合理的，应该被过滤掉。

输入格式：

输入在第一行给出正整数N，取值在(0, 105]；随后N行，每行给出1个人的姓名（由不超过5个英文字母组成的字符串）、以及按“yyyy/mm/dd”（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。

输出格式：

在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。

输入样例：
5
John 2001/05/12
Tom 1814/09/06
Ann 2121/01/30
James 1814/09/05
Steve 1967/11/20
输出样例：
3 Tom John
//一个测试点运行超时
#include<iostream>
#include<string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include<iomanip>
#include<list>
using namespace std;
class people {
public:
	people() = default;
	people(const people &orign) {
		name = orign.name;
		year = orign.year;
		day = orign.day;
		month = orign.month;
	}
	string name;
	int year, month, day;
};
int transform(string str) {
	stringstream buff;
	int result;
	buff << str;
	buff >> result;
	buff.clear();
	return result;
}
bool check(people p) {
	if (p.year < 1814 || p.year>2014)
		return false;
	else if (p.year == 1814) {
		if (p.month < 9)
			return false;
		else if (p.month == 9) {
			if (p.day < 6)
				return false;
		}
	}
	else if (p.year == 2014) {
		if (p.month > 9)
			return false;
		else if (p.month == 9) {
			if (p.day > 6)
				return false;
		}
	}
	return true;
}
int main() {
	int n, i, result_n = 0;
	string buff_name, buff_data, buff_year, buff_month, buff_day;
	people buff_p, oldest, youngest;
	oldest.year = 2014;
	oldest.month = 9;
	oldest.day = 6;
	youngest.year = 1814;
	youngest.month = 9;
	youngest.day = 6;
	cin >> n;
	for (i = 0; i < n; i++) {
		cin >> buff_p.name >> buff_data;
		buff_year = buff_data.substr(0, 4);
		buff_month = buff_data.substr(5, 2);
		buff_day = buff_data.substr(8, 2);
		buff_p.year = transform(buff_year);
		buff_p.month = transform(buff_month);
		buff_p.day = transform(buff_day);
		if (check(buff_p)) {
			result_n++;
			if (buff_p.year < oldest.year) {
				oldest = buff_p;
			}
			else if (buff_p.year == oldest.year) {
				if (buff_p.month < oldest.month)
					oldest = buff_p;
				else if (buff_p.month == oldest.month) {
					if (buff_p.day<oldest.day)
						oldest = buff_p;
				}
			}
			if (buff_p.year > youngest.year) {
				youngest = buff_p;
			}
			else if (buff_p.year == youngest.year) {
				if (buff_p.month > youngest.month)
					youngest = buff_p;
				else if (buff_p.month == youngest.month) {
					if (buff_p.day>youngest.day)
						youngest = buff_p;
				}
			}
		}
	}
	if (result_n)
		cout << result_n << " " << oldest.name << " " << youngest.name;
	else
		cout << 0;
	system("pause");
	return 0;
}
