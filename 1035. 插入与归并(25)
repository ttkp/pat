根据维基百科的定义：

插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。

归并排序进行如下迭代操作：首先将原始序列看成N个只包含1个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下1个有序的序列。

现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？

输入格式：

输入在第一行给出正整数N (<=100)；随后一行给出原始序列的N个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。

输出格式：

首先在第1行中输出“Insertion Sort”表示插入排序、或“Merge Sort”表示归并排序；然后在第2行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行末不得有多余空格。
输入样例1：
10
3 1 2 8 7 5 9 4 6 0
1 2 3 7 8 5 9 4 6 0
输出样例1：
Insertion Sort
1 2 3 5 7 8 9 4 6 0
输入样例2：
10
3 1 2 8 7 5 9 4 0 6
1 3 2 8 5 7 4 9 0 6
输出样例2：
Merge Sort
1 2 3 8 4 5 7 9 0 6

#include<iostream>
#include<string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include<iomanip>
using namespace std;
bool is_order(vector<int> num, int first, int last) {
	int i;
	for (i = first + 1; i < last; i++) {
		if (num[i] < num[i - 1])
			return false;
	}
	return true;
}
bool if_merge(vector<int> num, int *pos, int n) {
	int i, k = *pos;
	while (k > 1) {
		for (i = k; i <= n - k; i += k) {
			if (!is_order(num, i, i + k)) {
				k /= 2;
				break;
			}
		}
		if (i > n - k) {
			if (!is_order(num, i, n))
				k /= 2;
			else {
				*pos = k;
				return true;
			}
		}
	}
	return false;
}
void insertsort(vector<int> num, int *pos, int n) {
	int i = *pos, d = num[i];
	while (d < num[i - 1] && i>0) {
		num[i] = num[i - 1];
		i--;
	}
	num[i] = d;
	for (i = 0; i < n - 1; i++) {
		cout << num[i] << " ";
	}
	cout << num[i];
}
void mergesort(vector<int> num, int *pos, int n) {
	int i;
	for (i = 0; i <= n - 2 * (*pos); i += 2 * (*pos)) {
		sort(num.begin() + i, num.begin() + i + 2 * (*pos));
	}
	if (i < n)
		sort(num.begin() + i, num.end());
	for (i = 0; i < n - 1; i++)
		cout << num[i] << " ";
	cout << num[i];
}
int main() {
	int n, i, num, pos, j;
	cin >> n;
	vector<int> old_vec, new_vec, seq_vec;
	for (i = 0; i < n; i++) {
		cin >> num;
		old_vec.push_back(num);
	}
	for (i = 0; i < n; i++) {
		cin >> num;
		new_vec.push_back(num);
	}
	for (i = 0; i < n; i++) {
		vector<int>::iterator it;
		it = find(old_vec.begin(), old_vec.end(), new_vec[i]);
		num = it - old_vec.begin();
		seq_vec.push_back(num);
	}
	for (i = 1; i < n; i++) {
		if (new_vec[i - 1] > new_vec[i])
			break;
	}
	pos = i;

	if (if_merge(new_vec, &pos, n)) {
		cout << "Merge Sort" << endl;
		mergesort(new_vec, &pos, n);
	}
	else {
		cout << "Insertion Sort" << endl;
		insertsort(new_vec, &pos, n);
	}
	system("pause");
	return 0;
}
