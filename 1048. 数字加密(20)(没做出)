本题要求实现一种数字加密方法。首先固定一个加密用正整数A，对任一正整数B，将其每1位数字与A的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对13取余——这里用J代表10、Q代表11、K代表12；对偶数位，用B的数字减去A的数字，若结果为负数，则再加10。这里令个位为第1位。

输入格式：

输入在一行中依次给出A和B，均为不超过100位的正整数，其间以空格分隔。

输出格式：

在一行中输出加密后的结果。

输入样例：
1234567 368782971
输出样例：
3695Q8118

#include<iostream>
#include<string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include<iomanip>
#include<map>
#pragma warning(disable:4996)
using namespace std;
int main(void) {
	string a, b,r="";
	string str1 = "0123456789JQK";
	string str2 = "01234567890123456789";
	int i,n,d,an,bn;
	cin >> a >> b;
	an = a.size(), bn = b.size();
	if (an > bn) {
		n = an;
		for (i = 0; i < an - bn; i++)
			b = '0' + b;
	}
	else{
		n = b.size();
		for (i = 0; i < bn - an; i++) 
			a='0'+a;
	}
	for (i = 0; i <n; i++) {
		if (!(i % 2)) {
			r = str1[(a[n - i-1] - '0' + (b[n - i-1] - '0'))%13]+r;
		}
		else {
			if ((b[b.size() - i-1] - '0' - (a[a.size() - i-1] - '0')) < 0)
				r = str2[b[n - i-1] - '0' - (a[n - i-1] - '0') + 10]+r;
			else
				r = str2[b[n - i-1] - '0' - (a[n - i-1] - '0')]+r;
		}
	}
	cout <<r;
	system("pause");
	return 0;
}
