“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。

输入格式：

输入第一行给出一个正整数N（<=50000），是已知夫妻/伴侣的对数；随后N行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个ID号，为5位数字（从00000到99999），ID间以空格分隔；之后给出一个正整数M（<=10000），为参加派对的总人数；随后一行给出这M位客人的ID，以空格分隔。题目保证无人重婚或脚踩两条船。

输出格式：

首先第一行输出落单客人的总人数；随后第二行按ID递增顺序列出落单的客人。ID间用1个空格分隔，行的首尾不得有多余空格。

输入样例：
3
11111 22222
33333 44444
55555 66666
7
55555 44444 10000 88888 22222 11111 23333
输出样例：
5
10000 23333 44444 55555 88888

超时了，我自己做的时候用一个map，然后再去遍历，应该建两个map的

#include<iostream>
#include<string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include<iomanip>
#include<map>
#include<set>

using namespace std;
bool compare(const string &a,const string &b){
	return a.compare(b);
}
int main()
{
	int n,m,i;
	string a, b;
	cin >> n;
	map<string, string> couple;
	map<string, int> absent;
	vector<string> num,rel;
	for (i = 0; i < n; i++){
		cin >> a >> b;
		couple[a] = b;
		couple[b] = a;
	}
	cin >> m;
	for (i = 0; i < m; i++){
		cin >> a;
		num.push_back(a);
		if (couple[num[i]] != "")
			absent[couple[num[i]]] = 1;
	}
	for (i = 0; i < m; i++){
		if (!absent[num[i]])
			rel.push_back(num[i]);
	}
	sort(rel.begin(), rel.end());
	cout << rel.size()<<endl;
	if (rel.size()){
		cout << rel[0];
		for (i = 1; i < rel.size(); i++)
			cout <<" "<< rel[i];
	}
	system("pause");
}
