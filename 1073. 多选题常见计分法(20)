批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到50%分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。

输入格式：

输入在第一行给出两个正整数N（<=1000）和M（<=100），分别是学生人数和多选题的个数。随后M行，每行顺次给出一道题的满分值（不超过5的正整数）、选项个数（不少于2且不超过5的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母a开始顺次排列。各项间以1个空格分隔。最后N行，每行给出一个学生的答题情况，其每题答案格式为“(选中的选项个数 选项1 ……)”，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。

输出格式：

按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后1位。最后输出错得最多的题目选项的信息，格式为：“错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号”。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出“Too simple”。

输入样例1：
3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (3 b d e) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (1 c) (4 a b c d)
输出样例1：
3.5
6.0
2.5
2 2-e
2 3-a
2 3-b
输入样例2：
2 2 
3 4 2 a c
2 5 1 b
(2 a c) (1 b)
(2 a c) (1 b)
输出样例2：
5.0
5.0
Too simple

*********************************************************************************************************************
搞事情， 不想写。
#include <stdio.h>

struct Ques {
    int qscore;     // 满分
    int qsnum;      // 选项个数
    int qrnum;      // 正确选项个数
    int qawr[128];  // 所有正确选项
};
typedef struct Ques s_ques;

#define LEN 120
int main (void) {
    int snum;           // 学生人数
    int qnum;           // 题目个数
    s_ques ques[LEN];   // 每道题的信息
    int wrong[LEN][128] = {0}; // 错误信息矩阵
    int wmax = 0;              // 最大错误次数
    char ch;
    int i;
    int j;
    int k;

    scanf("%d %d", &snum, &qnum);
    for (i = 1; i <= qnum; i++) {
        ques[i].qawr['a'] = 0;
        ques[i].qawr['b'] = 0;
        ques[i].qawr['c'] = 0;
        ques[i].qawr['d'] = 0;
        ques[i].qawr['e'] = 0;
        scanf("%d %d %d", &ques[i].qscore, &ques[i].qsnum, &ques[i].qrnum);
        for (j = 1; j <= ques[i].qrnum; j++) {
            scanf(" %c", &ch);
            ques[i].qawr[(int)(ch)] = 1;
        }
    }
    getchar(); // 回车挡掉

    int len;   // 初始是第1道题
    int mys;   // 这个学生选了几个选项
    char slt;  // 选中选项
    for (i = 1; i <= snum; i++) {
        double score = 0.0;  // 每个学生的初始分数
        len = 1;
        // 一个 while 循环是一位学生答题的全部情况
        while ((ch = getchar()) != '\n') {
            if (ch == '(') {
                int cawr[128] = {0}; // 用来记录该题答题情况, 有1, 无0
                scanf("%d", &mys);
                for (j = 1; j <= mys; j++) {
                    scanf(" %c", &slt);
                    cawr[(int)(slt)] = 1;
                }

                // 学生这个选项答了, 而正确答案没有, 相应错误+1
                for (k = 'a'; k <= 'e'; k++) {
                    if (cawr[k] != ques[len].qawr[k]) wrong[len][k]++;
                    if (wrong[len][k] > wmax) wmax = wrong[len][k];
                }

                if (
                    // 所有选项全部匹配, 为完全正确
                    cawr['a'] == ques[len].qawr['a'] &&
                    cawr['b'] == ques[len].qawr['b'] &&
                    cawr['c'] == ques[len].qawr['c'] &&
                    cawr['d'] == ques[len].qawr['d'] &&
                    cawr['e'] == ques[len].qawr['e']
                ) {
                    score += (double)(ques[len].qscore);
                } else if (
                    // 这一项学生答了, 而正确答案没有这一项, 该题答错
                    (cawr['a'] == 1 && ques[len].qawr['a'] == 0) ||
                    (cawr['b'] == 1 && ques[len].qawr['b'] == 0) ||
                    (cawr['c'] == 1 && ques[len].qawr['c'] == 0) ||
                    (cawr['d'] == 1 && ques[len].qawr['d'] == 0) ||
                    (cawr['e'] == 1 && ques[len].qawr['e'] == 0) 
                ) {
                    // 该题答错
                    // do nothing
                } else {
                    // 部分正确
                    score += (double)(ques[len].qscore) / 2.0;
                }
                len++; // 进入到下一题
            }
        }
        printf("%.1f\n", score); // 打印这位同学的得分
    }

    if (wmax == 0) {
        printf("Too simple\n");
    } else {
        for (i = 1; i <= qnum; i++) {
            for (j = 'a'; j <= 'e'; j++) {
                if (wrong[i][j] == wmax) {
                    printf("%d %d-%c\n", wrong[i][j], i, j);
                }
            }
        }
    }

    return 0;
}
********************************************************************************************************************
写了一半的代码
#include<iostream>
#include<string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <sstream>
#include <functional>
#include<iomanip>
#include<fstream>
#include<map>
using namespace std;
class topic{
public:
	double m_Score;
	int m_AnswerNumber;
	int m_CorrectNumber;
	string m_choice = "";
};
int main(){
	int N, M,i,j,r;
	cin >> N >> M;
	vector<topic> test;
	topic temp;
	char answer;
	string str;
	string choice;
	double rel;
	bool allright = true;
	for (i = 0; i < M; i++){
		cin >> temp.m_Score >> temp.m_AnswerNumber >> temp.m_CorrectNumber;
		for (j = 0; j < temp.m_CorrectNumber; j++){
			cin >> answer;
			temp.m_choice += answer;
		}
		test.push_back(temp);
	}
	for (i = 0; i < N; i++){
		rel = 0;
		getline(cin, str);
		for (j = 0; j < M; j++){
			if (str[j] == '('){
				choice = "";
			}
			else if (str[j] == ')'){
				r = test[i].m_choice.find_first_of(choice);
				if (r != string::npos){
					if (choice.size() == test[i].m_choice.size()){
						rel += test[i].m_Score;
					}
					else{
						allright = false;
						rel += test[i].m_Score *0.5;
					}
				}
				else{
					allright = false;
				}
				i++;
			}
			else
			{
				cin >> answer;
				choice += answer;
			}
		}
	}
	system("pause");
	return 0;
}
